@page "/orders"
@rendermode InteractiveServer
@inject IOrderService OrderService


<h3>My Orders</h3>

@if (isLoading)
{
    <p>Loading your orders...</p>
}
else if (!orders.Any())
{
    <div class="alert alert-info">
        You don't have any orders yet.
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Order ID</th>
                <th>Date</th>
                <th>Total</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.OrderId</td>
                    <td>@order.OrderDate.ToString("yyyy-MM-dd")</td>
                    <td>$@order.TotalAmount.ToString("F2")</td>
                    <td>@order.OrderStatus</td>
                    <td>
                        <a href="/order-details/@order.OrderId" class="btn btn-sm btn-primary">Details</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Orders> orders = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            // Use the simplified method that handles user retrieval internally
            orders = (await OrderService.GetOrdersForCurrentUserAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
            // You could add error handling here
        }
        finally
        {
            isLoading = false;
        }
    }
}