@page "/manageproduct/{id:int?}"
@rendermode InteractiveServer
@inherits LayoutComponentBase

<div class="card">
    <div class="card-header">
        <h5>@((Product.ProductId == 0) ? "Add Product" : "Edit Product")</h5>
    </div>
    <div class="card-body">
        <EditForm Model="Product" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" />
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="productName" class="form-label">Product Name <span style="color:red">*</span></label>
                    <InputText id="productName" class="form-control" @bind-Value="Product.ProductName" />
                    <ValidationMessage For="@(() => Product.ProductName)" class="text-danger" />
                </div>

                <!-- Price -->
                <div class="col-md-6 mb-3">
                    <label for="price" class="form-label">Price <span style="color:red">*</span></label>
                    <InputNumber id="price" class="form-control" @bind-Value="Product.Price" />
                    <ValidationMessage For="@(() => Product.Price)" class="text-danger" />
                </div>

                <!-- Stock Quantity -->
                <div class="col-md-6 mb-3">
                    <label for="stockQuantity" class="form-label">Stock Quantity <span style="color:red">*</span></label>
                    <InputNumber id="stockQuantity" class="form-control" @bind-Value="Product.StockQuantity" />
                    <ValidationMessage For="@(() => Product.StockQuantity)" class="text-danger" />
                </div>

                <!-- Category Dropdown -->
                <div class="col-md-6 mb-3">
                    <label for="category" class="form-label">Category</label>
                    <select id="category" class="form-select" @bind="Product.CategoryId">
                        <option value="">-- Select Category --</option>
                        @foreach (var category in Categories)
                        {
                            <option value="@category.CategoryId">@category.CategoryName</option>
                        }
                    </select>
                </div>

                <div class="col-md-6 mb-3">
                    <label for="supplier" class="form-label">Supplier</label>
                    <select id="supplier" class="form-select" @bind="Product.SupplierId">
                        <option value="">-- Select Supplier --</option>
                        @foreach (var supplier in Suppliers)
                        {
                            <option value="@supplier.SupplierId">@supplier.SupplierName</option>
                        }
                    </select>
                </div>

                <div class="col-12 mb-3">
                    <label for="productDescription" class="form-label">Product Description</label>
                    <textarea id="productDescription" class="form-control" rows="3" @bind="Product.ProductDescription"></textarea>
                </div>

                <div class="col-12 mb-3">
                    <label class="form-label">Upload Product Image</label>
                    <InputFile OnChange="OnFileChange" class="form-control" />
                    @if (!string.IsNullOrEmpty(Product.ProductPhoto))
                    {
                        <img src="data:image/png;base64,@Product.ProductPhoto" alt="Product Image" class="img-thumbnail mt-2" width="100" height="100" />
                    }
                </div>
            </div>

            <div class="card-footer text-end">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>



@code {
    [Parameter]
    public int? Id { get; set; }

    private ProductViewModel Product = new();
    private List<Categories> Categories = new();
    private List<Suppliers> Suppliers = new();
    private IBrowserFile? UploadedFile;

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue && Id > 0)
        {
            // Fetch the product for editing
            Product = await ProductService.GetProductViewModeByIdAsync(Id.Value);
        }
        else
        {
            Product = new ProductViewModel();
        }
        Categories = await CategoryService.GetAllCategories();
        Suppliers = await SupplierService.GetAllSuppliers();
    }

    private async Task HandleValidSubmit()
    {
        if (UploadedFile != null)
        {
            Product.ProductPhoto = await ConvertFileToBase64(UploadedFile);
        }

        if (Product.ProductId == 0)
        {
            var id = await ProductService.AddProductAsync(new Products()
                {
                    ProductName = Product.ProductName,
                    Price = Product.Price,
                    CategoryId = Product.CategoryId,
                    StockQuantity = Product.StockQuantity,
                    CreatedAt = DateTime.Now,
                    SupplierId = Product.SupplierId
                });

            await ProductDetailService.AddProductDetailAsync(new ProductDetails()
                {
                    ProductDescription = Product.ProductDescription,
                    ProductPhoto = Product.ProductPhoto,
                    ProductId = id
                });

            //Add Inventory
            await InventoryService.AddInventoryTransaction(new InventoryTransactionQueryViewModel()
                {
                    ProductId = id,
                    Quantity = Product.StockQuantity,
                    TransactionType = CommonStrings.TransactionAdded,
                    UserId = new Random().Next(1, 10), //Change it to actaul user
                    TransactionLog = $"{Product.ProductName} has been {CommonStrings.TransactionAdded} with {Product.StockQuantity} quantity."
                });
        }
        else
        {
            await ProductService.UpdateProductAsync(new Products()
                {
                    ProductId = Product.ProductId,
                    ProductName = Product.ProductName,
                    Price = Product.Price,
                    CategoryId = Product.CategoryId,
                    StockQuantity = Product.StockQuantity,
                    CreatedAt = DateTime.Now,
                    SupplierId = Product.SupplierId
                });

            await ProductDetailService.UpdateProductDetailAsync(new ProductDetails()
                {
                    ProductId = Product.ProductId,
                    ProductDescription = Product.ProductDescription,
                    ProductPhoto = Product.ProductPhoto,
                });

            //Update Inventory
            await InventoryService.UpdateInventoryTransaction(new InventoryTransactionQueryViewModel()
                {
                    ProductId = Product.ProductId,
                    Quantity = Product.StockQuantity,
                    NewQuantity = Product.StockQuantity,
                    TransactionType = CommonStrings.TransactionUpdated,
                    UserId = new Random().Next(1, 10), //Change it to actaul user
                    TransactionLog = $"{Product.ProductName} has been {CommonStrings.TransactionUpdated} with {Product.StockQuantity} quantity."
                });
        }
        Navigation.NavigateTo("/products");
    }

    private void Cancel() => Navigation.NavigateTo("/products");

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            using (var stream = file.OpenReadStream())
            {
                await stream.ReadAsync(buffer, 0, (int)file.Size);
            }
            Product.ProductPhoto = Convert.ToBase64String(buffer);
        }
    }

    private async Task<string> ConvertFileToBase64(IBrowserFile file)
    {
        using var stream = file.OpenReadStream();
        stream.Seek(0, SeekOrigin.Begin);
        stream.Position = 0;
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        return Convert.ToBase64String(ms.ToArray());
    }
}
