@page "/productdetail/{productId:int?}"
@rendermode InteractiveServer

<div class="container mt-4">
    <div class="card shadow">
        <div class="row g-0">
            <!-- Product Image -->
            <div class="col-md-5">
                <img src="data:image/png;base64,@product.ProductPhoto" class="img-fluid rounded-start"
                     alt="@product.ProductName"
                     onerror="this.onerror=null; this.src='/Images/errorimage.jpg';">
            </div>

            <!-- Product Details -->
            <div class="col-md-7">
                <div class="card-body">
                    <h3 class="card-title">@product.ProductName</h3>
                    <p class="text-muted">@product.ProductDescription</p>
                    <h4 class="text-success">$@product.Price</h4>
                    <p><strong>Category:</strong> @category?.CategoryName</p>
                    <p><strong>Seller:</strong> @seller?.SupplierId</p>
                    <p><strong>Stock Available:</strong> @product.StockQuantity</p>

                    <!-- Quantity Selection -->
                    <div class="d-flex align-items-center mb-3">
                        <button class="btn btn-secondary btn-sm me-2" @onclick="DecreaseQuantity">-</button>
                        <input type="number" class="form-control w-25 text-center"
                               @bind="orderQuantity" min="1" max="@product.StockQuantity">
                        <button class="btn btn-secondary btn-sm ms-2" @onclick="IncreaseQuantity">+</button>
                    </div>
                    @if (quantityErrorMessage != null)
                    {
                        <p class="text-danger">@quantityErrorMessage</p>
                    }

                    <!-- Add to Order Button -->
                    <button class="btn btn-primary" @onclick="AddToOrder" disabled="@(!canAddToOrder)">
                        Add to Order
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int productId { get; set; }

    private ProductViewModel product = new();
    private Categories category = new();
    private Suppliers seller = new();
    private int orderQuantity = 1;
    private bool canAddToOrder = true;
    private string quantityErrorMessage=string.Empty;

    protected override async Task OnInitializedAsync()
    {
        product = await ProductService.GetProductViewModeByIdAsync(productId);
        var categories = await CategoryService.GetAllCategories();
        category = categories.FirstOrDefault(cat => cat.CategoryId == product.CategoryId); 
        seller = await SupplierService.GetSuppliersById(product.SupplierId);
    }

    private void IncreaseQuantity()
    {
        if (orderQuantity < product.StockQuantity)
        {
            orderQuantity++;
            quantityErrorMessage = null;
        }
        else
        {
            quantityErrorMessage = "Cannot exceed available stock!";
        }
    }

    private void DecreaseQuantity()
    {
        if (orderQuantity > 1)
        {
            orderQuantity--;
            quantityErrorMessage = null;
        }
    }

    private void AddToOrder()
    {
        if (orderQuantity <= product.StockQuantity)
        {
            //OrderService.AddToOrder(product, orderQuantity);
            canAddToOrder = false;
        }
    }
}

