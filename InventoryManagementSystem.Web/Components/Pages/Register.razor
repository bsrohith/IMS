@page "/register"
@inject IUserService UserService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<h1>Register</h1>

@if (!string.IsNullOrEmpty(message))
{
    <div class="@alertClass" role="alert">
        @message
    </div>
}

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="username">Username</label>
                <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
                <ValidationMessage For="@(() => registerModel.Username)" />
            </div>

            <div class="form-group mb-3">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div class="form-group mb-3">
                <label for="address">Address</label>
                <InputText id="address" class="form-control" @bind-Value="registerModel.UserAddress" />
            </div>

            <div class="form-group mb-3">
                <label for="city">City</label>
                <InputText id="city" class="form-control" @bind-Value="registerModel.City" />
            </div>
            <div class="form-group mb-3">
                <label for="userRole">User Role</label>
                <InputSelect id="userRole" class="form-control" @bind-Value="registerModel.UserRole">
                    <option value="">-- Select Role --</option>
                    <option value="User">User</option>
                    <option value="Supplier">Supplier</option>
                </InputSelect>
                <ValidationMessage For="@(() => registerModel.UserRole)" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>

            <div class="form-group mb-3">
                <label for="confirmPassword">Confirm Password</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> Processing...</span>
                }
                else
                {
                    <span>Register</span>
                }
            </button>
        </EditForm>
    </div>
</div>

<div class="mt-3">
    <p>Already have an account? <a href="login">Log in</a></p>
</div>

@code {
    private UserRegister registerModel = new UserRegister();
    private string message;
    private string alertClass;
    private bool isSubmitting = false;

    private async Task HandleRegistration()
    {
        isSubmitting = true;

        var result = await UserService.RegisterUserAsync(registerModel);

        if (result.Success)
        {
            alertClass = "alert alert-success";
            message = result.Message;

            // Redirect to login page after short delay
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            alertClass = "alert alert-danger";
            message = result.Message;
        }

        isSubmitting = false;
    }
}